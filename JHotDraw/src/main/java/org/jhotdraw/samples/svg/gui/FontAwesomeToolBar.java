package org.jhotdraw.samples.svg.gui;

import dk.sdu.mmmi.featuretracer.lib.FeatureEntryPoint;
import org.jhotdraw.util.*;
import java.awt.*;
import java.io.IOException;
import javax.swing.*;
import org.jhotdraw.app.JHotDrawFeatures;
import org.jhotdraw.draw.*;
import org.jhotdraw.samples.svg.tools.DisplayToogle;
import org.jhotdraw.samples.svg.tools.FontAwesomeMeta;
import org.jhotdraw.samples.svg.tools.ToolPanel;

// #CHANGED (FILE IS CREATED)

// We disabled the original 'FONT'-toolbar and added this when an icon is selected.
// The changing of font-size is as it was for the other font toolbar.

// We added additional buttons for each icon which is drawn by a unicode character.
// Each of the buttons has a actionlistener that on-click changes the 'text' of the 
// selected SVGFontAwesomeFigure to that of the button.

public class FontAwesomeToolBar extends AbstractToolBar {

    private Font fontIcons;
    private java.util.List<String> listIcons;

    /** Creates new instance. */
    @FeatureEntryPoint(JHotDrawFeatures.FontAwesomeToolBar)
    public FontAwesomeToolBar() {
        setName(ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels").getString("font.toolbar"));
        initiate();
    }
    
    private void initiate() {
        listIcons = new FontAwesomeMeta().getIconAsString();
        try {
            fontIcons = Font.createFont(Font.TRUETYPE_FONT, int.class.getResourceAsStream("org/jhotdraw/samples/svg/fonts/fontawesome-webfont.ttf")).deriveFont(20f);
        } catch (FontFormatException | IOException ex) { }
    }

    @Override
    public void setEditor(DrawingEditor drawingEditor) {
        super.setEditor(drawingEditor);
        if (drawingEditor != null) {
            new DisplayToogle().FontAwesome(editor, this);
        }
    }

    @Override
    protected JComponent createDisclosedComponent(int state) {
        JPanel toolPanel = null;
        if (state == 1) {
            toolPanel = new ToolPanel().fontAwesome(listIcons, fontIcons, editor);
        }
        return toolPanel;
    }

    @Override
    protected String getID() {
        return "font";
    }
    
    @Override
    protected int getDefaultDisclosureState() {
        return 0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
